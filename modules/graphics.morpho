/* Graphics */

import constants
import meshtools
import color

var _eps = 1e-15
var _fntntfnd = Error("FntNtFnd", "Font not found.")
var _txtdrnvrtprll = Error("TxtDrnVrtPrll", "Direction and vertical must not be parallel or zero.")

/* **************************************
 * Utility functions
 **************************************** */

/** Constructs a rotation matrix
  @param[in] theta - rotation angle
  @param[in] axis - axis to rotate about
  @returns the rotation matrix  */
fn _rotation(theta, axis) {
  var x = axis[0], y=axis[1], z=axis[2]
  var ctheta = cos(theta), stheta = sin(theta), cc=1-ctheta

  return Matrix(
  [[x*x*cc+ctheta,   x*y*cc-z*stheta, x*z*cc+y*stheta],
   [x*y*cc+z*stheta, y*y*cc+ctheta,   y*z*cc-x*stheta],
   [z*x*cc-y*stheta, y*z*cc+x*stheta, z*z*cc+ctheta ]]
  )
}

/** Generates a vector normal to a given vector but of arbitrary orientation */
fn _normalvector(vec) {
  var order = [abs(vec[0]), abs(vec[1]), abs(vec[2])].order()
  var out=vec.clone()
  out[order[0]]=0
  out[order[1]]=vec[order[2]]
  out[order[2]]=-vec[order[1]]
  return out
}

/* 3d cross product */
fn _cross3d(a, b) {
  return Matrix([ a[1]*b[2]-a[2]*b[1], a[2]*b[0]-a[0]*b[2], a[0]*b[1]-a[1]*b[0] ])
}

/* Gram-Schmitt orthonormalization */
fn _orthogonalize(m) { 
  var ncols=m.dimensions()[1]
  for (i in 0...ncols) {
    var x = m.column(i)
    for (j in 0...i) {
      var y = m.column(j)
      x -= x.inner(y)*y
    }
    var nrm = x.norm() 
    if (nrm<_eps) _txtdrnvrtprll.throw() 
    x/=nrm
    m.setcolumn(i, x)
  }
}

/* **************************************
 * Graphics primitives
 **************************************** */

/** TriangleComplexes are a basic graphical unit that draw a set of triangles
   from a given set of vertices. */
class TriangleComplex {
  init(position, normals, colors, connectivity, filter=nil, transmit=nil) {
    self.position=position /* Vertex position matrix */
    self.normals=normals /* Matrix of normal vectors */
    self.colors=colors /* Color */
    self.connectivity=connectivity /* Connectivity matrix; columns are triangles */
    
    /* Optional arguments to be used by povray*/
    self.filter = filter 
    self.transmit = transmit
  }

}

/** Draws a cylinder
  @param[in] start - start point
  @param[in] end - end point
  @param[in] aspectratio - aspect ratio
  @param[in] n - number of faces to use
  @param[in] color - Color of the sphere */
class Cylinder {
  init(start, end, aspectratio=0.1, n=10, color=nil, filter=nil, transmit=nil) {
    self.start = Matrix(start)
    self.end = Matrix(end)
    self.aspectratio = aspectratio
    self.n = n
    self.color = color

    /* Optional arguments to be used by povray*/
    self.filter = filter 
    self.transmit = transmit
  }

  totrianglecomplex() {
    var aspectratio = self.aspectratio
    var n = self.n

    var col = self.color
    if (isnil(col)) col = [0.5,0.5,0.5]

    var np=2*n+2 // 2 points at the end plus 2*n point
    var nt=4*n
    var dim=self.start.count()
    var vertices=Matrix(dim, np);
    var normals=Matrix(dim, np);

    var x1=self.start, x2=self.end
    var dx=x2-x1 // Vector from x1 to x2
    var length = dx.norm()
    if (abs(length)<1e-8) return nil
    var ndx=dx/length

    var px=_normalvector(dx)
    var pxnorm=px.norm()
    if (abs(pxnorm)<1e-15) return
    px=0.5*length*aspectratio*px/pxnorm

    // Head and base of the arrow
    vertices.setcolumn(0, x1)
    vertices.setcolumn(np-1, x2)
    normals.setcolumn(0, -1*dx)
    normals.setcolumn(np-1, dx)

    /* The cylinder is structured like so:

           [n+1...2n]
                      \
    [1..n] A------------B
           |            |
           0            1 2n+1
           <---- dx ----> */
    for (i in 1..n) {
        var theta = 2*Pi*(i-1)/n
        var qx = _rotation(theta, ndx)*px
        var nn=qx/qx.norm()
        var pt = qx+x1
        // Find vertex ring A by rotating px about ndx, to obtain qx, and then adding x1
        vertices.setcolumn(i, pt)
        // Vertex ring B is obtained by simply translating the first circle by dx*(1-ar)
        vertices.setcolumn(n+i, pt+dx)

        // Normals
        normals.setcolumn(i, nn)
        normals.setcolumn(n+i, nn)
    }

    var conn=Sparse(np,nt)
    for (i in 0...n) {
      // Layer 0-A
      conn[0,i]=1
      conn[i+1,i]=1
      if (i<n-1) conn[i+2,i]=1 else conn[1,i]=1

      // C-1
      conn[np-1,n+i]=1
      conn[n+i+1,n+i]=1
      if (i<n-1) conn[n+i+2,n+i]=1 else conn[n+1,n+i]=1

      // Layer A-B
      conn[i+1,2*n+i]=1
      conn[n+i+1,2*n+i]=1
      if (i<n-1) conn[i+2,2*n+i]=1 else conn[1,2*n+i]=1

      if (i<n-1) conn[i+2,3*n+i]=1 else conn[1,3*n+i]=1
      if (i<n-1) conn[n+i+2,3*n+i]=1 else conn[n+1,3*n+i]=1
      conn[n+i+1,3*n+i]=1
    }

      return TriangleComplex(vertices, normals, col, conn)
  }

}

var _sphere = [ PolyhedronMesh(
  [[-0.982247, 0.0, 0.187592], [0.982247,
    0.0, -0.187592], [-0.303531, -0.934172, 0.187592], [-0.303531,
    0.934172, 0.187592], [0.794654, -0.57735, 0.187592], [0.794654,
    0.57735, 0.187592], [-0.187592, -0.57735, 0.794654], [-0.187592,
    0.57735, 0.794654], [-0.491123, -0.356822, -0.794654], [-0.491123,
    0.356822, -0.794654], [0.491123, -0.356822, 0.794654], [0.491123,
    0.356822, 0.794654], [0.607062,
    0.0, -0.794654], [-0.794654, -0.57735, -0.187592], [-0.794654,
    0.57735, -0.187592], [-0.607062, 0.0,
    0.794654], [0.187592, -0.57735, -0.794654], [0.187592,
    0.57735, -0.794654], [0.303531, -0.934172, -0.187592], [0.303531,
    0.934172, -0.187592]]
  ,
  [[14, 9, 8, 13, 0], [1, 5, 11, 10, 4], [4, 10, 6, 2, 18], [10, 11, 7,
    15, 6], [11, 5, 19, 3, 7], [5, 1, 12, 17, 19], [1, 4, 18, 16,
    12], [3, 19, 17, 9, 14], [17, 12, 16, 8, 9], [16, 18, 2, 13, 8], [2,
     6, 15, 0, 13], [15, 7, 3, 14, 0]]
) ]

/** Draws a sphere
  @param[in] center - the center of the sphere
  @param[in] r - radius
  @param[in] color - Color of the sphere */
class Sphere {
  init(center, r, color=nil, maxrefine = 3, filter=nil, transmit=nil) {
    self.center = center
    self.r = r
    self.color = color
    self.maxrefine = maxrefine

    /* Optional arguments to be used by povray */
    self.filter = filter 
    self.transmit = transmit
  }

  refinementlevel() {
      var n = 0 
      while (self.r/(2^n)>0.1 && n<self.maxrefine) {
      if (n>=_sphere.count()-1) {
        _sphere.append(refinemesh(_sphere[-1]))
      }
      n += 1;
    }
    return n
  }

  totrianglecomplex(scale=true) {
    var center = self.center, r = self.r
    var col = self.color
    if (isnil(col)) col = [0.5,0.5,0.5]
    var n = self.refinementlevel() 

    var v = _sphere[n].vertexmatrix().clone()
    var normals = _sphere[n].vertexmatrix().clone()
    var conn = _sphere[n].connectivitymatrix(0,2) // Should clone!
    var nv = v.dimensions()[1]

    var x0=center
    if (islist(center)) x0=Matrix(center)

    // Ignores the center and size and just produces the unit ball
    if (!scale) { x0*=0; r=1; col = [0.5,0.5,0.5] } 

    for (i in 0...nv) { // Normalize, scale and translate
      var x = v.column(i)
      var nn = x/x.norm()
      normals.setcolumn(i, nn)
      v.setcolumn(i, x0 + r*nn)
    }

    return TriangleComplex(v, normals, col, conn)
  }

}

/** Draws an arrow
  @param[in] start - start point
  @param[in] end - end point
  @param[in] aspectratio - aspect ratio of the arrow
  @param[in] n - number of faces to use
  @param[in] color - Color of the sphere */
class Arrow {
  init(start, end, aspectratio=0.1, n=10, color=nil, filter=nil, transmit=nil) {
    self.start = Matrix(start)
    self.end = Matrix(end)
    self.aspectratio = aspectratio
    self.n = n
    self.color = color

    /* Optional arguments to be used by povray*/
    self.filter = filter 
    self.transmit = transmit
  }

  totrianglecomplex () {
    var aspectratio = self.aspectratio
    var n = self.n

    var col = self.color
    if (isnil(col)) col = [0.5,0.5,0.5]

    var np=3*n+2 // 2 points at the end plus 3*n point
    var nt=6*n
    var dim=self.start.count()
    var vertices=Matrix(dim, np)
    var normals=Matrix(dim, np)

    var x1=self.start, x2=self.end
    var dx=x2-x1 // Vector from x1 to x2
    var length = dx.norm()
    var ndx=dx/length

    var px=_normalvector(dx)
    var pxnorm=px.norm()
    if (abs(pxnorm)<1e-15) return
    px=0.5*length*aspectratio*px/pxnorm

    // Head and base of the arrow
    vertices.setcolumn(0, x1)
    vertices.setcolumn(np-1, x2)
    normals.setcolumn(0, -1*dx)
    normals.setcolumn(np-1, dx)

    /* The arrow is structured like so:

           [n+1...2n]   C--[2n+1...3n]
                      \ |\
    [1..n] A------------B \
           |               \
           0<----- u --->   1 3n+1
           <------ dx ------> */
    var u=(1-aspectratio)*dx
    for (i in 1..n) {
        var theta = 2*Pi*(i-1)/n
        var qx = _rotation(theta, ndx)*px
        var nn=qx/qx.norm()
        var pt = qx+x1
        // Find vertex ring A by rotating px about ndx, to obtain qx, and then adding x1
        vertices.setcolumn(i, pt)
        // Vertex ring B is obtained by simply translating the first circle by dx*(1-ar)
        vertices.setcolumn(n+i, pt+u)
        // Vertex ring C is obtained by simply adding qx to the point in vertex ring B
        vertices.setcolumn(2*n+i, pt+u+qx)

        // Normals
        normals.setcolumn(i, nn)
        normals.setcolumn(n+i, nn)
        normals.setcolumn(2*n+i, nn)
    }

    var conn=Sparse(np,nt)
    for (i in 0...n) {
      // Layer 0-A
      conn[0,i]=1
      conn[i+1,i]=1
      if (i<n-1) conn[i+2,i]=1 else conn[1,i]=1

      // C-1
      conn[np-1,n+i]=1
      conn[2*n+i+1,n+i]=1
      if (i<n-1) conn[2*n+i+2,n+i]=1 else conn[2*n+1,n+i]=1

      // Layer A-B
      conn[i+1,2*n+i]=1
      conn[n+i+1,2*n+i]=1
      if (i<n-1) conn[i+2,2*n+i]=1 else conn[1,2*n+i]=1

      if (i<n-1) conn[i+2,3*n+i]=1 else conn[1,3*n+i]=1
      if (i<n-1) conn[n+i+2,3*n+i]=1 else conn[n+1,3*n+i]=1
      conn[n+i+1,3*n+i]=1

      // Layer B-C
      conn[n+i+1,4*n+i]=1
      if (i<n-1) conn[n+i+2,4*n+i]=1 else conn[n+1,4*n+i]=1
      conn[2*n+i+1,4*n+i]=1

      if (i<n-1) conn[n+i+2,5*n+i]=1 else conn[n+1,5*n+i]=1
      if (i<n-1) conn[2*n+i+2,5*n+i]=1 else conn[2*n+1,5*n+i]=1
      conn[2*n+i+1,5*n+i]=1
    }

    return TriangleComplex(vertices, normals, col, conn)
  }

}

/** Draws a tube
  @param[in] pts - list of points or a matrix with points as the columns
  @param[in] rad - radius
  @param[in] n - number of faces to use per point
  @param[in] closed - whether to treat the point list as closed or not
  @param[in] color - Color of the sphere */
class Tube {
  normalvector(vec) { // Musn't take the abs for Tube
    var order = [vec[0], vec[1], vec[2]].order()
    var out=vec.clone()
    out[order[0]]=0
    out[order[1]]=vec[order[2]]
    out[order[2]]=-vec[order[1]]
    return out
  }

  init(pts, rad, n=10, color=nil, closed=false, filter=nil, transmit=nil) {
    self.pts = pts
    self.radius = rad
    self.n = n
    self.closed = closed
    self.color = color

    /* Optional arguments to be used by povray*/
    self.filter = filter
    self.transmit = transmit
  }

  totrianglecomplex() {
    var n = self.n
    var col = self.color
    if (isnil(col)) col = [0.5,0.5,0.5]

    var mat = self.pts
    if (islist(self.pts)) mat = Matrix(self.pts).transpose();

    var np=mat.dimensions()[1]
  	var dim=mat.dimensions()[0]
    var nv=n*np
  	var nt=n*(2*(np-1))
    if (!self.closed) {
  		nv+=2 // Two points for the caps
  		nt+=2*n // n triangles for each cap
  	}

    var vertices=Matrix(dim, nv);
    var normals=Matrix(dim, nv);

  	var sep[np], ndx[np]

  	// Loop over line segments to calculate separation vectors
  	for (k in 0..np-2) {
  		var dx=mat.column(k+1)-mat.column(k)
  		sep[k]=dx/dx.norm()
  		ndx[k]+=sep[k]
  		ndx[k+1]+=sep[k]
  	}

  	// Correct ends if closed
  	if (self.closed) {
  		var dx=mat.column(0)-mat.column(np-1)
  		sep[np-1]=dx/dx.norm()
  		ndx[np-1]+=sep[np-1]
  		ndx[0]+=sep[np-1]
  	}

  	// Now generate vertices
   	for (k in 0...np) {
  		var px // Vertices are generated from a point plus this displacement
   		if (k==0) {
  			px=self.normalvector(ndx[k])
  		} else { // This aligns vertices generated from successive points
  			var dx=vertices.column((k-1)*n)-mat.column(k-1)
  			px=dx-dx.inner(ndx[k])*ndx[k]/ndx[k].norm()
  		}
  		px=self.radius*px/px.norm()

  		var x1 = mat.column(k)
  		for (i in 0...n) {
  			/* Find vertex ring at point k by rotating px about ndx, to obtain qx, and then adding x1 */
        var theta = i*2*Pi/n
  			var qx = _rotation(theta, ndx[k])*px
  			vertices.setcolumn(k*n+i, x1+qx)

  			normals.setcolumn(k*n+i, qx/qx.norm())
  		}
   	}

  	/* Loop over segments again to create the triangles */
  	var conn=Sparse(nv,nt)

  	var m=0
  	for (k in 0..np-2) {
  		for (i in 0...n) {
  			conn[k*n+i,m]=1
  			if (i==n-1) conn[k*n,m]=1 else conn[k*n+i+1,m]=1
  			conn[((k+1)*n+i),m]=1
  			m+=1
  			if (i==n-1) conn[k*n,m]=1 else conn[k*n+i+1,m]=1
  			if (i==n-1) conn[(k+1)*n,m]=1 else conn[((k+1)*n+i)+1,m]=1
  			conn[((k+1)*n+i),m]=1
  			m+=1
  		}
  	}

  	if (self.closed) {
  		// Connect first and last points
  		var k=np-1
  		for (i in 0...n) {
  			conn[k*n+i,m]=1
  			if (i==n-1) conn[k*n,m]=1 else conn[k*n+i+1,m]=1
  			conn[i,m]=1
  			m+=1
  			if (i==n-1) conn[k*n,m]=1 else conn[k*n+i+1,m]=1
  			if (i==n-1) conn[0,m]=1 else conn[i+1,m]=1
  			conn[i,m]=1
  			m+=1
  		}
  	} else {
  		// End caps
  		vertices.setcolumn(nv-2, mat.column(0))
  		vertices.setcolumn(nv-1, mat.column(np-1))

  		normals.setcolumn(nv-2, -sep[0]/sep[0].norm())
  		normals.setcolumn(nv-1, sep[np-2]/sep[np-2].norm())

  		for (i in 0...n) {
  			conn[i,m]=1
  			if (i==n-1) conn[0,m]=1 else conn[i+1,m]=1
  			conn[nv-2,m]=1
  			m+=1
  			conn[((np-1)*n+i),m]=1
  			if (i==n-1) conn[(np-1)*n,m]=1 else conn[((np-1)*n+i)+1,m]=1
  			conn[nv-1,m]=1
  			m+=1
  		}
  	}

      return TriangleComplex(vertices, normals, col, conn, filter=self.filter, transmit=self.transmit)
  }

}

/* **************************************
 * Text
 **************************************** */

class Text {
  init(string, posn, dirn=nil, vertical=nil, size=10, font=nil, color=nil, filter=nil, transmit=nil) {
    self.posn = posn
    if (islist(self.posn)) self.posn = Matrix(self.posn)

    self.dirn = dirn // Direction of flow for the text 
    if (islist(self.dirn)) self.dirn = Matrix(self.dirn)

    self.vertical = vertical // Vertical direction
    if (islist(self.vertical)) self.vertical = Matrix(self.vertical)
    
    self.string = string 
    self.font = font
    self.color = color 
    self.size = size 
    
    /* Optional arguments to be used by povray*/
    self.filter = filter 
    self.transmit = transmit
  }

  transformationmatrix() {
    if (!(ismatrix(self.dirn) || ismatrix(self.vertical))) return nil 
    var m = Matrix(4,4) 
    for (i in 0..3) m[i,i]=1

    if (self.dirn) for (i in 0..2) m[i,0]=self.dirn[i]
    if (self.vertical) for (i in 0..2) m[i,1]=self.vertical[i]

    // Now set the final direction to the cross product of the two 
    var zp = _cross3d(m.column(1),m.column(0)) 
    for (i in 0..2) m[i,2]=zp[i]

    _orthogonalize(m)

    return m.transpose() 
  }

}

class Font {
  init (name, size, id=nil) {
    self.name = name 
    self.size = size 
    self.id = id
  }
}

/* **************************************
 * Graphics class
 **************************************** */

class Graphics {
  init(title = nil, background = nil) {
    self.displaylist = [] // A collection of primitives to display
    self.title = title
    if (!self.title) self.title="Morpho" // Title to show
    self.background = background
    if (!self.background) self.background = Black
  }

  display(item) {
    if (isobject(item)) self.displaylist.append(item)
  }

  add(right) { // Create a union of two graphics objects
    var g = Graphics()
    for (el in self.displaylist) g.displaylist.append(el)
    for (el in right.displaylist) g.displaylist.append(el)
    return g
  }
}

/* **************************************
 * Show a graphics object
 **************************************** */

class Show {

  init(g) {
    self.uidinit()
    self.spheres = Dictionary() 
    self.fonts = []
    self.colors = Dictionary() 

    var tempfolder = "/tmp"
    var fname = self._randomalphanumstring(10)
    var out = File("${tempfolder}/morpho${fname}.draw", "w")

    self.write(g, out)

    out.close()
    // 1/7/25 Redirect error output to /dev/null to suppress annoying errors on macOS
    system("morphoview -t ${tempfolder}/morpho${fname}.draw > /dev/null 2>&1 &")
  }

  /** Generate a random name */
  _randomalphanumstring(n) {
    var alpha="abcdefghijklmnopqrstuvwxyz0123456789"
    var name=""
    for (i in 1..n) name+=alpha[Int(random()*(alpha.count()-1))]
    return name
  }

  uidinit() {
    self.uid = 0
  }

  uid() { // Generate unique identifiers 
    self.uid+=1
    return self.uid
  }

  preamble(graphic, out) {
    out.write("S 1 3")
    out.write("W \"${graphic.title}\"")
  }

  /* The visit method for a generic `item`. 

  Here, we define this separate `visitgeneric` method that performs the intended generic task, and have the actual generic `visit` method call `visitgeneric`. This enables calls to the generic fallback from *within a specific implementation*. 
  For example, the `visit` method for a `Sphere` object can call `self.visitgeneric(item, out)` to visit the `TriangleComplex` representation of the sphere, but calling `self.visit(item, out)` would result in an infinite loop.
  */
  visitgeneric(item, out) {
    self.visit(item.totrianglecomplex(), out) 
  }

  // Will be used by Cylinder, Arrow and Tube
  visit(item, out) {
    self.visitgeneric(item, out)
  }

  visit(Sphere item, out) {
    var n = item.refinementlevel()
    
    if (item.color) {
      self.visitgeneric(item, out)
      return 
    } else if (!self.spheres.contains(n)) { // Check if we already have a sphere object at this refinement level
      var tri=item.totrianglecomplex(scale=false)
      tri.id = self.uid() 
      out.write("o ${tri.id}")
      self.trianglecomplexobjectdata(tri,out) 
      self.spheres[n]=tri
    } 

    out.write("i")
    out.write("s ${item.r}")
    out.write("t ${item.center[0]} ${item.center[1]} ${item.center[2]}")
    out.write("d ${self.spheres[n].id}")
  }

  trianglecomplexobjectdata(item, out) {
    var x = item.position
    var n = item.normals
    var col = item.colors
    var localcolor = false
    var dimensions=x.dimensions()
    var dim = dimensions[0]
    var nv = dimensions[1]

    if (ismatrix(col)) {
      if (col.dimensions()[1]>1) localcolor = true
    } else if (isobject(col) && !islist(col)) col = col.rgb(0)

    out.write("v \"xnc\"")
    for (i in 0...nv) {
      var line = ""
      for (j in 0...dim) {
        line+="${x[j,i]} "
      }
      for (j in 0...dim) {
        line+="${n[j,i]} "
      }
      if (localcolor) {
        for (j in 0...3) line+="${col[j,i]} "
      } else {
        for (j in 0...item.colors.count()) line+="${col[j]} "
      }
      out.write(line)
    }

    out.write("f")
    var f=item.connectivity
    nv=f.dimensions()[0]
    var nf=f.dimensions()[1]

    for (i in 0...nf) {
      var line = ""
      for (j in 0...nv) {
        if (f[j,i]!=0) line+="${j} "
      }
      out.write(line)
    }
  }

  visit(TriangleComplex item, out) {
    var id = self.uid() 
    out.write("o ${id}")
    self.trianglecomplexobjectdata(item, out)
    out.write("i")
    out.write("d ${id}")
  }

  fontpath() {
    var platform = System.platform()
    if (platform=="macos") {
      return ["/System/Library/Fonts"]
    } else return ["/usr/share/fonts","/usr/local/share/fonts"]
  }

  matchfontfile(file, font) {
    var fname = file.split(".")
    if (fname[0]==font && 
        (fname[1]=="ttc" || fname[1]=="ttf")) return true 
    return false 
  } 

  searchfontfolder(folder, font) {
    for (f in Folder.contents(folder)) {
      var path = folder + "/" + f
      if (self.matchfontfile(f, font)) return path

      if (Folder.isfolder(path)) { // Recurse
        var result = self.searchfontfolder(path, font)
        if (result) return result 
      }
    }
    return nil
  }

  findfont(font) {
    var base = self.fontpath() 
    for (f in base) {
      var found = self.searchfontfolder(f, font)
      if (found) return found
    }
    return nil 
  }

  defaultfontname() {
    var platform = System.platform()
    if (platform=="macos") {
      return "Helvetica"
    } else return "FreeSans"
  }

  addcolor(color, out) {
    if (!self.colors.contains(color)) {
      var id = self.colors[color] = self.colors.count() 
      out.write("c ${id} ${color.r} ${color.g} ${color.b}")
    }
    return self.colors[color] 
  }

  addfont(font, size, out) {
    var path = self.findfont(font)
    if (!path) _fntntfnd.throw() 
    var id = self.uid()
    var fnt = Font(font, size, id=id) 
    self.fonts.append(fnt)

    out.write("F ${id} \"${path}\" ${size}")
    return id 
  }

  findfontid(font, size, out) {
    for (f in self.fonts) {
      if (f.name == font && f.size == size) return f.id
    }
    return self.addfont(font, size, out) 
  }

  visit(Text item, out) {
    var font = item.font
    if (!font) font = self.defaultfontname()
    var id = self.findfontid(font, item.size, out)
    
    if (item.color) {
      var id = self.addcolor(item.color, out) 
      out.write("C ${id}")
    }

    out.write("i")
    var m = item.transformationmatrix() 
    if (m) {
      var str = "m"
      for (i in 0..3) for (j in 0..3) str+=" "+String(m[i,j])
      out.write(str)
    }
    out.write("t ${item.posn[0]} ${item.posn[1]} ${item.posn[2]}")
    out.write("T ${id} \"${item.string}\"")
  }

  write(graphic, out) {
    self.preamble(graphic, out)

    for (item in graphic.displaylist) self.visit(item, out)
  }
}
