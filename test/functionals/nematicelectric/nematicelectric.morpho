// Nematic-Electric coupling

import meshtools
import plot
import "../numericalderivatives.morpho"

var L = 1
var np = 10

// Create mesh and fields

var b = MeshBuilder()
b.addvertex(Matrix([0,0,0]))
b.addvertex(Matrix([1,0,0]))
b.addvertex(Matrix([0,1,0]))
b.addface([0,1,2])

var m = b.build()

var nn = Field(m, Matrix([1/sqrt(2),1/sqrt(2),0])) // Nematic director
var phi = Field(m, 0) // Electric potential
phi[0,0] = 0
phi[0,1] = 1
phi[0,2] = 0

var lne = NematicElectric(nn, phi)

print lne.integrand(m)
// expect: [ 0.25 ]

print abs(lne.total(m) - 0.25) < 1e-8
// expect: true

print (lne.gradient(m)-numericalgradient(lne, m)).norm() < 1e-6
// expect: true

print lne.fieldgradient(nn)
// expect: <Field>
// expect: [ 0.235702 ]
// expect: [ 0 ]
// expect: [ 0 ]
// expect: [ 0.235702 ]
// expect: [ 0 ]
// expect: [ 0 ]
// expect: [ 0.235702 ]
// expect: [ 0 ]
// expect: [ 0 ]

print lne.fieldgradient(phi)
// expect: <Field>
// expect: [ -1 ]
// expect: [ 0.5 ]
// expect: [ 0.5 ]
