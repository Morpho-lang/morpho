/* ***************************************************************
 * Functionals
 * ===========
 * This module provides a class that helps implement new
 * functionals in morpho, as well as some less common functionals
 **************************************************************** */

import kdtree

class Functional {
  init(grade) {
    self.grade = grade
  }

  integrand(mesh) {
    var conn
    if (self.grade>0) conn=mesh.connectivitymatrix(0, self.grade)
    var vert=mesh.vertexmatrix()
    var nel = mesh.count(self.grade)

    var out = Matrix(nel)

    for (i in 0...nel) {
      var el
      if (conn) el=conn.rowindices(i)
      out[i]=self.integrandfn(mesh, vert, i, el)
    }

    return out
  }

  gradient(mesh) {
    var conn
    if (self.grade>0) conn=mesh.connectivitymatrix(0, self.grade)
    var vert=mesh.vertexmatrix()
    var nel = mesh.count(self.grade)

    var dim=vert.dimensions()[0]
    var nv=vert.dimensions()[1]
    var out = Matrix(dim,nv)

    for (i in 0...nel) {
      var el
      if (conn) el=conn.rowindices(i)
      self.gradientfn(mesh, vert, i, el, out)
    }

    return out
  }

  total(mesh) {
    var a = self.integrand(mesh)
    return a.sum()
  }
}

/** Hookean elasticity:
  F = 1/2 ((L-L0)/L0)^2
  Construct with a field of reference lengths */
class HookeElasticity < Functional {
  init(field) {
    self.ref = field
    super.init(1)
  }

  integrandfn(mesh, vert, id, el) {
    var len = (vert.column(el[0])-vert.column(el[1])).norm()
    var len0 = self.ref[self.grade, id]
    return ((len-len0)/len0)^2/2
  }

  gradientfn(mesh, vert, id, el, grd) {
    var x0 = vert.column(el[0])
    var x1 = vert.column(el[1])
    var dx = x0-x1

    var len = dx.norm()
    var len0 = self.ref[self.grade, id]
    var g = dx*(len-len0)/(len0^2*len)

    grd.setcolumn(el[0], g+grd.column(el[0]))
    grd.setcolumn(el[1], -g+grd.column(el[1]))
  }
}

/* Pairwise potential */
class PairwisePotential < Functional {
  init (func, grad, cutoff=nil) {
    self.func = func
    self.grad = grad
    self.cutoff = cutoff
    super.init(0)
  }

  buildtree(mesh) {
    var vert = mesh.vertexmatrix()
    var nv = mesh.count()
    var pts = []
    for (i in 0...nv) {
      pts.append(vert.column(i))
    }
    return KDTree(pts)
  }

  integrand(mesh) {
    var nv = mesh.count()
    var out = Matrix(nv)
    var vert = mesh.vertexmatrix()

    for (i in 0...nv) {
      var x = vert.column(i)
      for (j in i+1...nv) {
        var r = (x-vert.column(j)).norm()
        if (self.cutoff && r>self.cutoff) continue
        var f = self.func(r)
        out[i]+=0.5*f
        out[j]+=0.5*f
      }
    }
    return out
  }

  gradient(mesh) {
    var nv = mesh.count()
    var vert = mesh.vertexmatrix()
    var dim = vert.dimensions()[0]
    var out = Matrix(dim, nv)

    for (i in 0...nv) {
      for (j in i+1...nv) {
        var dx = vert.column(i)-vert.column(j)
        var r = dx.norm()
        if (self.cutoff && r>self.cutoff) continue
        var df = self.grad(r)/r
        out.setcolumn(i, df*dx+out.column(i))
        out.setcolumn(j, -df*dx+out.column(j))
      }
    }
    return out
  }

}
