var A = Array([[0,1,2,3],[4,5,6,7],[8,9,10,11]])
// ranges
print A[0..1,1..2] 
// expect: [ [ 1, 2 ], [ 5, 6 ] ]

// lists
print A[[1,2,0,1],[0,0,0,2]]
// expect: [ [ 4, 4, 4, 6 ], [ 8, 8, 8, 10 ], [ 0, 0, 0, 2 ], [ 4, 4, 4, 6 ] ]

// mix of range and list
print A[0..2,[0,0,0,2]]
// expect: [ [ 0, 0, 0, 2 ], [ 4, 4, 4, 6 ], [ 8, 8, 8, 10 ] ]

// mix of range and int
print A[0..1,3]
// expect: [ [ 3 ], [ 7 ] ]

// mix of list and int
print A[2,[0,1,2,1,2]]
// expect: [ [ 8, 9, 10, 9, 10 ] ]

// range out of bounds
try{
	print A[-1..2,1..2] 
} catch{
	"IndxBnds": print "IndxBnds"
// expect: IndxBnds
}
try{
	print A[0..3,1..2] 
} catch{
	"IndxBnds": print "IndxBnds"
// expect: IndxBnds
}


// range is not int
try{
	print A[0.0..2,1..2] 
} catch{
	"NonNmIndx": print "NonNmIndx"
// expect: NonNmIndx
}

// list is out of bounds
try{
	print A[[-1,2,-1],1..2] 
} catch{
	"IndxBnds": print "IndxBnds"
// expect: IndxBnds
}
try{
	print A[[100],1..2] 
} catch{
	"IndxBnds": print "IndxBnds"
// expect: IndxBnds
}

// list is not int
try{
	print A[[1,2,1],[0.2,0.1]] 
} catch{
	"NonNmIndx": print "NonNmIndx"
// expect: NonNmIndx
}
try{
	print A[[1,2,1],[[1]]] 
} catch{
	"NonNmIndx": print "NonNmIndx"
// expect: NonNmIndx
}

// int + list but int is out of bounds
try{
	print A[[0,2,1],-1] 
} catch{
	"IndxBnds": print "IndxBnds"
// expect: IndxBnds
}
try{
	print A[[0,2,1],100] 
} catch{
	"IndxBnds": print "IndxBnds"
// expect: IndxBnds
}
try{
	print A[[0,2,1],1.01] 
} catch{
	"NonNmIndx": print "NonNmIndx"
// expect: NonNmIndx


//wrong dim
try{
	print A[[1,2],[2,3],[0,1]] 
} catch{
	"ArrayDim": print "ArrayDim"
// expect: ArrayDim
}
// garbage in 

try{
	print A[A] 
} catch{
	"NonNmIndx": print "NonNmIndx"
// expect: NonNmIndx
}
try{
	print A[nil] 
} catch{
	"NonNmIndx": print "NonNmIndx"
// expect: NonNmIndx
}