// Test underlying integration routine

import meshtools
import "counter.morpho"

var mb = MeshBuilder() 
mb.addvertex([0])
mb.addvertex([1])
mb.addedge([0,1])
var m = mb.build()

fn step(x) { 
    if (x<0.3) return 1
    return 0
}

// List of integrals to evaluate and precalculated exact values 
var tests = [ [ step, 0.3 ],
              [ fn (x) sqrt(x), 0.66666666666666666667 ],
              [ fn (x) x*(1-x), 0.16666666666666666667 ],
              [ fn (x) 1/sqrt(x), 2 ],
              [ fn (x) exp(-(x-1/2)^2), 0.92256201282558489751 ] ]

var out = []

for (t in tests) {
    var c = EvaluationCounter(t[0]) 
    
    var r1 = LineIntegral(c.eval, method={ "rule" : "gauss5" } ).total(m)
    var c1 = c.count()
    c.reset()
    var r2 = LineIntegral(c.eval).total(m)
    var c2 = c.count()

    out.append([r1, abs((r1-t[1])/t[1]), c1, r2, abs((r2-t[1])/t[1]), c2])
}

for (res in out) print Array(res)

var times = []
var ntimes = 1000

print "Timing tests"
for (t in tests) {
    var start = System.clock() 
    for (i in 1..ntimes) {
        var r1 = LineIntegral(fn (x) apply(t[0], x[0]), method={ } ).total(m)
    }
    var time1 = System.clock()-start

    start = System.clock() 
    for (i in 1..ntimes) {
        var r2 = LineIntegral(fn (x) apply(t[0], x[0])).total(m)
    }
    var time2 = System.clock() - start
    
    times.append([time1, time2])
}

for (t in times) print Array(t)