// Complex number testing
import constants
// constuctor
var Z = Complex(1,2);
print Z
// expect: 1 + 2im
var C = Complex(3.2,-1.1);
print C 
// expect: 3.2 - 1.1im
print Z.real()
// expect: 1
print Z.imag()
// expect: 2
print C.real()
// expect: 3.2
print C.imag()
// expect: -1.1


// constuctor error

try {
    var X = Complex(1)    
} catch {
    "CmplxCns" : print "ok"
// expect: ok
}    
try {
    var C = Complex(1,"text")    
} catch {
    "CmplxCns" : print "ok"
// expect: ok
}    


// clone
var X = Z
print X
// expect: 1 + 2im


// conj
print Z.conj()
// expect: 1 - 2im
print C.conj()
// expect: 3.2 + 1.1im

// addition
print Z+C
// expect: 4.2 + 0.9im
print 1 + Z
// expect: 2 + 2im
print C + 1.2 
// expect: 4.4 - 1.1im
var A = 1;
A += Complex(2,3)
print A
// expect: 3 + 3im


// subtraction
print Z - C
// expect: -2.2 + 3.1im
print 1 - Z
// expect: 0 - 2im
print C - 1.2 
// expect: 2 - 1.1im
var A = 1;
A -= Complex(2,3)
print A
// expect: -1 - 3im



// multiplication
print Z * C
// expect: 5.4 + 5.3im

print Z * -3
// expect: -3 - 6im

print 0.2 * C
// expect: 0.64 - 0.22im
var A = 2;
A *= Complex(2,3)
print A
// expect: 4 + 6im



// division
print Complex(1,1)/Complex(2,2)
// expect: 0.5 + 0im

print Z/C
// expect: 0.0873362 + 0.655022im
print Z/3
// expect: 0.333333 + 0.666667im
print 2/C
// expect: 0.558952 + 0.19214im
print 1/Complex(3,4)
// expect: 0.12 - 0.16im
var A = 2;
A /= Complex(3,4)
print A
// expect: 0.24 - 0.32im


// powers
print Z^2
// expect: -3 + 4im

print C^2.3
// expect: 11.9464 - 11.3891im

print Complex(3,4)^-1
// expect: 0.12 - 0.16im

print C^Z
// expect: -3.35141 + 5.6408im

print 2^Complex(1,1)
// expect: 1.53848 + 1.27792im

print E^Complex(0,Pi) + 1
// expect: 0 + 0im

print Z.real()
// expect: 1

print C.real()
// expect: 3.2

print Z.imag()
// expect: 2

print C.imag()
// expect: -1.1

print abs(Z.angle()-arctan(Z.real(),Z.imag()))<1e-15
// expect: true

print abs(C.angle()-arctan(C.real(),C.imag()))<1e-15
// expect: true

var a1 = im
print abs(a1.angle()-Pi/2)<1e-15
// expect: true

a1 = a1+(1-im)
print abs(a1.angle())<1e-15
// expect: true

a1 = -a1
print abs(a1.angle()+Pi)<1e-15
// expect: true

a1 = -im
print abs(a1.angle()+Pi/2)<1e-15
// expect: true

a1 = 1+im
print abs(a1.angle()-Pi/4)<1e-15
// expect: true

a1 = 3+4im
print a1.abs()
// expect: 5