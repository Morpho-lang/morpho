/* The VTK Module for Morpho (https://github.com/Morpho-lang/morpho) 

This module provides support for I/O of Meshes and Fields using the VTK
File Format.

The data is stored in the Legacy VTK format, using the `Unstructured
Grid` Dataset Format. See here for the format documentation:
https://kitware.github.io/vtk-examples/site/VTKFileFormats/  

By convention, the methods in the classes that have a name starting with
a "_" are helper functions and are not meant to be used by the end user.

Contact: chaitanya.joshi@tufts.edu */

import meshtools 
import parser

// Defining a VTK class that contains methods common to both the importer and the exporter
class VTK {
    init() {}

    // Check whether `fieldname` is a a string is free of whitespaces (a VTK file requirement)
    _checkfieldname(fieldname) {

        // Check the fieldname
        if (!isnil(fieldname)) {
            // If not nil, first check whether the fieldname is a string
            if (!isstring(fieldname)) {
                self.err = Error("FnameNotStr", "Expected a string, but received `${fieldname}`.")
                self.err.throw()
            }
            // Now that it's a string, checking for embedded whitespaces
            for (c in fieldname) {
                if (c==" ") {
                    self.err = Error("InvalidFname", "fieldname (`${fieldname}`) cannot have embedded whitespaces.")
                    self.err.throw()
                }
            }
        }

    }

    
    // Ensure that `filename` ends in ".vtk"
    _ensurevtk(filename) {
        
        if (!isstring(filename)) {
            self.err = Error("FnameNotStr", "Expected a string, but received `${filename}`.")
            self.err.throw()
        }
        var fl = filename.split(".")

        var n = fl.count()

        if (n == 0) { // No extension
            return "${filename}.vtk"
        }
        else if (fl[n-1] != "vtk") {
            // Either a wrong extension has been provided, or the
            // filename itself is expected to contain a period, like
            // mesh.2.vtk. We again add ".vtk" at the end in this case.
            return "${filename}.vtk"
        }
        else {
            return filename
        }

    }

}

// VTKExporter: Exports Fields and / or Meshes to a .vtk file
class VTKExporter is VTK {

    init(obj, fieldname=nil) {
        
        // Initialize empty lists to optionally store fields later 
        self.fields = []
        self.fieldnames = []

        // Check whether the object is a Mesh or a Field or none of them
        if (ismesh(obj)) {

            self.mesh = obj

        } else if (isfield(obj)) {
            
            // If the object is a Field, then use its mesh for exporting
            self.mesh = obj.mesh()
            
            // Add this field to the list
            self.addfield(obj, fieldname=fieldname)

        } else {
            self.err = Error("InitErr", "Expected a Mesh or a Field object, but received `${obj}`.")
            self.err.throw()
        }

        self.maxg = self.mesh.maxgrade()

    }

    // Write the preamble for the file. 
    _preamble(file) {

        file.write("# vtk DataFile Version 3.0 ") 
        file.write("Exported using Morpho https://github.com/Morpho-lang/morpho ") // This line can be anything the user wants.
        file.write("ASCII ")
        file.write("DATASET UNSTRUCTURED_GRID \n")
    }
    
    // Writes a vector to the file 
    _writevector(file, v) {
        if (v.count()==2) {
            file.write("${v[0]} ${v[1]} 0 ")
        }
        else {
            file.write("${v[0]} ${v[1]} ${v[2]} ")
        }
    }

    // Writes all the vertices to the file
    _writevertices(file) {
        self.nvertices = self.mesh.count(0)

        file.write("POINTS ${self.nvertices} float ")
        
        for (id in 0...self.mesh.count()) {
            self._writevector(file, self.mesh.vertexposition(id))
        }

        file.write("\n")

    }

    /* Add higher grade elements */
    /*
    In the VTK legacy file for unstructured grid, the CELLS keyword
    requires two arguments, `n` and `size`. `n` is the total number of
    cells, and `size` is the total number of integers that follow,
    including the numPoints line, which tells the number of points in
    each cell. The numPoints adds one more number per cell. For example,
    here is how a single triangle will be represented:
    CELLS 4 13 
    2 0 1 
    2 1 2 
    2 2 0 
    3 0 1 2 
    Here, 4 is the total number of cells including the
    three edges and one triangle. The 13 is the total number of entries,
    which is (2+1)*3 + (3+1)*1. In general, the n and size for Morpho
    meshes become: n = sum_{g=1}^{g_max} n_g, where n_g is the number of
    elements of grade g

    and size = sum_{g=1}^{g_max} (g+2) * n_g
    */

    // Function to compute and write the CELLS keyword arguments as above
    _cellskwargs(file) {

        self.n = 0
        self.size = 0 
        self.ng = 0
        for (g in 1..self.maxg) {
            self.ng = self.mesh.count(g)
            self.n = self.n + self.ng
            self.size = self.size + (g + 2) * self.ng
        }

        file.write("CELLS ${self.n} ${self.size} ")

    }

    // Write an individual cell (edge or face) to the file
    _writecell(file, g, conn, id) {

        var vids = conn.rowindices(id) // vertex ids for the element
        var cellstr = "${g+1} "       
        for (v in 0..g) {
            cellstr += "${vids[v]} "
        }
        file.write("${cellstr}")
    
    }

    // Write all the cells (edges and faces) to the file
    _writecells(file) {

        self._cellskwargs(file)

        for (g in 1..self.maxg) {
            var conn = self.mesh.connectivitymatrix(0, g)
            var nv = g+1 // number of vertices in a grade g element   
            for (id in 0...self.mesh.count(g)) {
                
                self._writecell(file, g, conn, id)

            }
        }

        file.write("\n")

    }

    // Export the CELL_TYPES data corresponding to the cells. This is essentially th VTK ID of each cell (see the VTK documentation)
    _writecelltypes(file) {
        
        /* The preamble for CELL_TYPES requires the kewyord argument
        `n`, which we already evaluated in the _cellskwargs function */
        file.write("CELL_TYPES ${self.n}") 

        /* Now, the VTK cell IDs are:
        `3` for edges 
        `5` for triangles and 
        `10` for tetrahedra */
        self.vtkIDs = Matrix([3, 5, 10])
        for (g in 1..self.maxg) {
            for (id in 0...self.mesh.count(g)){
                file.write("${self.vtkIDs[g-1]} ")
            }
        }

        file.write("\n")
        
    }

    // Write the whole mesh to the file
    _writemesh(file) {

        self._writevertices(file)
        self._writecells(file)
        self._writecelltypes(file)

    }
    
    // Write a field to the file
    _writefield(file, field, fieldname) {
        /* For now, let's assume that the field has a shape [1,0,0],
        meaning is only one item on the vertices, and no items on any
        other grade. */

        // Figure out the quantity sitting on the field 
        var f0 = field[0,0,0]

        if ( isfloat(f0) ) {
            self.dof = 1
        } else {
            self.dof = f0.count()
        }

        // Handle the scalar case first
        if (self.dof == 1) {
            
            if ( isnil(fieldname) ) fieldname = "scalars"

            file.write("SCALARS ${fieldname} float 1 ")
            file.write("LOOKUP_TABLE default ")
            for (id in 0...self.mesh.count()) {
                file.write("${field[0,id]} ")
            }
        } else {

            if ( isnil(fieldname) ) fieldname = "vectors"

            file.write("VECTORS ${fieldname} float")
            for (id in 0...self.mesh.count()) {
                self._writevector(file, field[0,id])
                
            }
        
        }

        file.write("\n")

    }

    // Check whether `field` is a Field object, and throw error otherwise
    _checkfield(field) {

        // Check whether the first argument is a field
        if (!isfield(field)) {
            self.err = Error("ObjNotField", "Expected a Field object, but received `${field}`.")
            self.err.throw()
        }

        // Check whether the field has the right shape
        var shp = field.shape()
        var maxgrade = field.mesh().maxgrade()
        var wrongShape = (shp[0]!=1)
        for (i in 1...maxgrade) {
            wrongShape = wrongShape or (shp[i]!=0)
        }
        if (wrongShape) {
            self.err = Error("FieldShapeErr", "Received a field with shape `${shp}`. Fields with shape other than [1,0,0] are not currently supported.")
            self.err.throw()
        }

        // Check that the field is either a scalar or a 2/3D vector
        // Figure out the quantity sitting on the field 
        var f0 = field[0,0,0]

        if ( isfloat(f0) ) {
            return // It's a scalar, so we're good
        }
        self.dim = f0.dimensions()
        if (self.dim[1] != 1) {
            self.err = Error("FieldDimErr", "Expected a scalar or a 2D/3D vector field, but received a non-columnar matrix with dimensions ${self.dim}.")
            self.err.throw()
        }
        if (self.dim[0] != 2 and self.dim[0] != 3) {
            self.err = Error("FieldDimErr", "Expected a scalar or a 2D/3D vector field, but received a vector field with ${self.dim[0]} dimensions.")
            self.err.throw()
        }
    }

    // Function to add a field to the exporter.
    // Here, `field` is the Field object to be added, and `fieldname` is the name the user wishes to designate the field with. This `fieldname` cannot have embedded whitespaces in it.
    // Both the field and the fieldname get added to their respective lists 
    addfield(field, fieldname=nil) {

        self._checkfield(field)
        // If above is passed, add field to the fields list!
        self.fields.append(field)

        super._checkfieldname(fieldname)
        // If above is passed, add to the fieldnames list!
        self.fieldnames.append(fieldname)
    
    }
    
    // Function to export the fields and / or meshes to a file with the name `filename`. This name has to include the ".vtk" extension
    export(filename) {
        
        // Ensure filename ends with ".vtk"
        self.filename = super._ensurevtk(filename)

        // Open file for writing
        var f = File(self.filename, "write")

        // Add the preamble
        self._preamble(f)

        // Add the mesh
        self._writemesh(f)

        // Add fields if any
        self.nf = self.fields.count() // Number of fields added so far
        if (self.nf > 0) {
            f.write("POINT_DATA ${self.nvertices} ")
            for (i in 0...self.nf) {
                self._writefield(f, self.fields[i], self.fieldnames[i])
            }

        }

        // Close the file
        f.close()

    }

}

// VTKImporter: Imports Fields and / or Meshes from a .vtk file
class VTKImporter is VTK {

    // Initialize with the filename
    init(filename) {
        
        // Ensure filename ends with ".vtk"
        self.filename = super._ensurevtk(filename)
        

        // Start a mesh builder
        self.mb = MeshBuilder(dimension=3)
        self.mesh = nil

        // Create a Dictionary for possible fields to be imported. The keys for the fields in this Dictionary will be the names given to those fields in the VTK file.
        self.fields = Dictionary()

        // Open the file
        self.f = File(self.filename)

        // Start the tokenizer
        self.tok = Tokenizer(self.f)
        
        // Go through the whole file
        while (!self.f.eof()) {
            self.t = self.tok.next()

            // The mesh vertices start with `POINTS`
            if (self.t=="POINTS") {
                // Number after `POINTS` is the number of vertices
                self.nvertices = Int(self.tok.next()) 
                // The word after that is `float`. Let's skip that!
                self.t = self.tok.next()
                for (i in 0...self.nvertices) {
                    self._addvertex()
                    
                }

            }
            // Higher order elements start with `CELLS`
            if (self.t=="CELLS") {
                // The number after `CELLS` is the number of cells
                self.ncells = Int(self.tok.next())
                // The number after that is for memory purposes and we
                // can ignore that
                self.t = self.tok.next()
                for (i in 0...self.ncells) {
                    self._addcell()
                }

            }

            // If we get to POINT_DATA, that means mesh is ready
            // We can build it now.
            if (self.t=="POINT_DATA") self.mesh = self.mb.build()

            if (self.t=="SCALARS") {

                // The first word after SCALARS is the name of the field
                self.fieldname = self.tok.next()
                // The next 4 words are `float`, `1`, `LOOKUP_TABLE` and
                // `default`. Skipping those...
                for (j in 1..4) self.t = self.tok.next()
                // Initialize a scalar field
                self.field = Field(self.mesh, 0.0)
                // The following works ONLY when the fields are on the vertices
                for (i in 0...self.nvertices) {
                    self.field[i] = Float(self.tok.next())
                }
                self.fields[self.fieldname] = self.field
            }

            
            if (self.t=="VECTORS") {

                // The first word after VECTORS is the name of the field
                self.fieldname = self.tok.next()
                // The next word is float. Skipping that one...
                self.t = self.tok.next()
                // Initialize a vector field
                self.field = Field(self.mesh, Matrix([0,0,0]))
                // The following works ONLY when the fields are on the vertices
                for (i in 0...self.nvertices) {
                    self.field[i] = self._getvector()
                }
                self.fields[self.fieldname] = self.field
            }

        }

        // If there are no fields, then `POINT_DATA` would never be reached. In that case, build the mesh now.
        if (isnil(self.mesh)) self.mesh = self.mb.build()
                
    }

    // Generate a vector out of the next three characters
    _getvector() {

        self.vx = Float(self.tok.next())
        self.vy = Float(self.tok.next())
        self.vz = Float(self.tok.next())
        return Matrix([self.vx, self.vy, self.vz])
    
    }

    // Add a vertex from a given point in the file to the MeshBuilder object 
    _addvertex() {
        
        self.v = self._getvector()
        self.mb.addvertex(self.v)
    
    }

    // Add a higher order element from a given point in the file to the MeshBuilder object
    _addcell() {
        self.numPoints = Int(self.tok.next())
        
        if (self.numPoints==2) {
        
            self.e1 = Int(self.tok.next())
            self.e2 = Int(self.tok.next())
            self.mb.addedge([self.e1, self.e2])
        
        } else if (self.numPoints==3) {

            self.f1 = Int(self.tok.next())
            self.f2 = Int(self.tok.next())
            self.f3 = Int(self.tok.next())
            self.mb.addface([self.f1, self.f2, self.f3])
            
        } else if (self.numPoints==4) {

            self.f1 = Int(self.tok.next())
            self.f2 = Int(self.tok.next())
            self.f3 = Int(self.tok.next())
            self.f4 = Int(self.tok.next())
            self.mb.addvolume([self.f1, self.f2, self.f3, self.f4])
            
        }
    }

    // returns the mesh
    mesh() {
        return self.mesh
    }

    // Returns the field named `fieldname`
    field(fieldname) {

        super._checkfieldname(fieldname)
        try {
            return self.fields[fieldname]
        } catch {
            "DctKyNtFnd":
                Error("FieldNotFound", "Couldn't find the field `${fieldname}` in the file.").throw()
                
        }
    }

    // Returns a list of the names of the fields present in the file
    fieldlist() {
        return self.fields.keys()
    }

    // Checks whether the file contains a field by a given fieldname 
    containsfield(fieldname) {

        super._checkfieldname(fieldname)
        return self.fields.contains(fieldname)

    }

}
