// Demonstrate use of the povray module to raytrace graphics
import constants
import color
import plot
import povray

var icos = [[-0.688191, 0, 0.131433], [0.688191,
  0, -0.131433], [-0.212663, -0.654508, 0.131433], [-0.212663,
  0.654508, 0.131433], [0.556758, -0.404508, 0.131433], [0.556758,
  0.404508, 0.131433], [-0.131433, -0.404508, 0.556758], [-0.131433,
  0.404508, 0.556758], [-0.344095, -0.25, -0.556758], [-0.344095,
  0.25, -0.556758], [0.344095, -0.25, 0.556758], [0.344095, 0.25,
  0.556758], [0.425325,
  0, -0.556758], [-0.556758, -0.404508, -0.131433], [-0.556758,
  0.404508, -0.131433], [-0.425325, 0. ,
  0.556758], [0.131433, -0.404508, -0.556758], [0.131433,
  0.404508, -0.556758], [0.212663, -0.654508, -0.131433], [0.212663,
  0.654508, -0.131433]]

var faces = [[14, 9, 8, 13, 0], [1, 5, 11, 10, 4], [4, 10, 6, 2, 18], [10, 11, 7,
             15, 6], [11, 5, 19, 3, 7], [5, 1, 12, 17, 19], [1, 4, 18, 16,
             12], [3, 19, 17, 9, 14], [17, 12, 16, 8, 9], [16, 18, 2, 13, 8], [2,
             6, 15, 0, 13], [15, 7, 3, 14, 0]]


fn demo() {
  var p=PolyhedronMesh(icos, faces)
  var f=Field(p, fn (x,y,z) x)
  var g = plotfield(f, style="interpolate")

  for (i in 0...30) {
    var xx = Matrix([2*(random()-1/2), 2*(random()-1/2), 2*(random()-1/2)])
    while (xx.norm()<0.7) xx = Matrix([2*(random()-1/2), 2*(random()-1/2), 2*(random()-1/2)])
    g.display(Sphere(xx, 0.05*(1+random()), color=Color(random(),random(),random())))
  }
  g.display(Cylinder([-1,-1,-1],[1,1,1], aspectratio=0.01, color=Gray(0.3)))
  g.display(Arrow([-1,-1,-1],[-0.5,-1,-1], aspectratio=0.05, color=Red))
  g.display(Arrow([-1,-1,-1],[-1,-0.5,-1], aspectratio=0.05, color=Green))
  g.display(Arrow([-1,-1,-1],[-1,-1,-0.5], aspectratio=0.05, color=Blue))

  var c = []
  for (t in 0...2*Pi:2*Pi/40) c.append([cos(t), sin(t),0])
  g.display(Tube(c, 0.05, color=Gray(0.5), closed=true))

  g.background = White

  return g
}

var g=demo()

var pov = POVRaytracer(g)
pov.viewpoint=Matrix([0,0,5])
pov.viewangle=35
pov.light=[Matrix([10,10,10]), Matrix([-10,-10,10])]
pov.render("out.pov")

Show(g)
