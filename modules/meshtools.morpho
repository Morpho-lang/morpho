/* *********************************************************
 * Meshtools 
 * A module that provides various mesh creation, refinement
 * and visualization tools 
 * ********************************************************* */

// Dependencies 
import constants
import kdtree
import delaunay

// Error messages  
var _errMshBldDimIncnstnt = Error("MshBldDimIncnstnt", "Vertex dimension inconsistent with mesh dimension.")
var _errMshBldDimUnknwn = Error("MshBldDimUnknwn", "Cannot add elements until a vertex has been added or MeshBuilder initialized with a specified dimension.")
var _errMltVClstrFxd = Error("MltVClstrFxd", "More than one vertex in a selected cluster is fixed.")

/* **************************
 * Manual mesh creation
 * ************************** */

// Grades
var vertexGrade = 0
var lineGrade = 1
var areaGrade = 2
var volumeGrade = 3

class MeshBuilder {
  init(dimension=nil) {
    self.vertices = []
    self.dimension = dimension
    self.elements = nil 
    if (isnumber(dimension)) self.initdim(dimension)
  }

  initdim(dimension) {
    self.dimension = dimension
    self.elements = Array(dimension)
    for (i in 0...dimension) {
      self.elements[i]=[]
    }
  }

  addvertex(v) {
    var x = v
    if (islist(v)) x = Matrix(v)
    if (self.dimension==nil) self.initdim(x.count())

    if (x.count()!=self.dimension) _errMshBldDimIncnstnt.throw()
    self.vertices.append(x)
    return self.vertices.count()-1
  }

  addelement(grade, el) {
    if (!self.elements) _errMshBldDimUnknwn.throw()
    self.elements[grade-1].append(el)
    return self.elements[grade-1].count()-1
  }

  addedge(el) { return self.addelement(lineGrade, el) }

  addface(el) { return self.addelement(areaGrade, el) }
  
  addvolume(el) { return self.addelement(volumeGrade, el) }

  makeconnectivity(el) {
    if (el.count()==0) return nil
    var s = Sparse(0,0)
    for (lst, id in el) for (v in lst) s[v,id]=1
    return s
  }

  build() {
    var m = Mesh();

    var nv = self.vertices.count()

    var vert = Matrix(self.dimension, nv)
    for (x, i in self.vertices) vert.setcolumn(i, x)

    m.setvertexmatrix(vert)

    for (el, i in self.elements) {
        var s = self.makeconnectivity(el)
        if (s) m.addgrade(i+1, s)
    }

    return m
  }
}

/* ******************************************
 * A few constructors to create simple meshes
 * ****************************************** */

/** Creates a mesh from a parametric function.
 * @param[in] f - a function that returns the vertex position as a list
 * @param[in] range - parameter range to use
 * @param[in] closed - whether to close the mesh  */
fn LineMesh(f, range, closed=false) {
  var dim = f(range[0]).count()
  var mb = MeshBuilder(dimension=dim)

  for (t in range) mb.addvertex(f(t))

  var nlines = range.count()-1

  for (i in 0...nlines) mb.addedge([i,i+1])
  if (closed) mb.addedge([0,nlines])

  return mb.build()
}

/** Creates a mesh from a parametric function.
 * @param[in] f - a function that returns the vertex position as a list
 * @param[in] range - parameter range to use
 * @param[in] range - parameter range to use
 * @param[in] closed - whether to close the mesh  */
fn AreaMesh(f, r1, r2, closed=false) {
  var dim = f(r1[0],r2[0]).count()
  var mb = MeshBuilder(dimension=dim)

  for (v in r2) for (u in r1) mb.addvertex(f(u,v))

  var nu = r1.count(), nv = r2.count() // How many points
  var np = nu*nv
  var nfaces = (nu-1)*(nv-1)

  for (j in 0...nv-1) {
    for (i in 0...nu-1) {
      mb.addface([i+j*nu, i+1+j*nu, i+nu+j*nu])
      mb.addface([i+1+j*nu, i+nu+j*nu, i+1+nu+j*nu])
    }
  }

  // Close boundaries if selected
  var cu = closed, cv = closed
  if (islist(closed)) { cu=closed[0]; cv=closed[1] }

  if (cu) {
    var n=nu-1 // Connect right column to left column
    for (j in 0...nv-1) {
      mb.addface([n+j*nu, n+1+j*nu, 0+j*nu])
      mb.addface([n+j*nu, 0+nu+j*nu, n+nu+j*nu])
    }
  }
  if (cv) {
    var n=nv-1 // Connect top row to bottom row
    for (i in 0...nu-1) {
      mb.addface([i+n*nu, i+1+n*nu, i])
      mb.addface([i+1+n*nu, i, i+1])
    }
  }
  if (cu && cv) {  // For toroidal geometry, connect top right to bottom left
    mb.addface([nu*nv-1, (nv-1)*nu, nu-1])
    mb.addface([0, (nv-1)*nu, nu-1])
  }

  return mb.build()
}

/** Creates a mesh from a polyhedron specified as
  @param[in] list - a list of vertices
  @param[in] faces - list of lists of vertices corresponding to each face
  @returns a mesh */
fn PolyhedronMesh(list, faces) {
  var dim=list[0].count()
  var mb=MeshBuilder(dimension=dim)
  var nv=list.count() // Number of vertices in polyhedron

  // Vertices
  for (x in list) mb.addvertex(x)
  for (f in faces) { // Add midpoints
    var pt = Matrix(3)
    for (i in f) pt.acc(1, Matrix(list[i]))
    mb.addvertex(pt/f.count())
  }

  // Faces
  for (face, k in faces) { // Loop over faces
    var fv = face.count()
    for (i in 0...fv) { // Loop over the vertex indices and create a triangle for every pair
      var v1 = face[0]
      if (i<fv-1) v1=face[i+1]
      mb.addface([face[i], v1, k+nv])
    }
  }

  return mb.build()
}

// Constructs a mesh from a point cloud
fn DelaunayMesh(pts, outputdim=3) {
  var del = Delaunay(pts)
  var mb = MeshBuilder()

  for (x in del.pts) {
    var p = Matrix(outputdim)
    for (xi,i in x) p[i]=xi
    mb.addvertex(p)
  }

  for (tri in del.triangulate()) {
    mb.addelement(del.dim, tri)
  }

  return mb.build()
}

/* **************************************************
 * Change the dimension in which the mesh is embedded 
 * ************************************************** */

fn ChangeMeshDimension(mesh, dim) {
    var vert = mesh.vertexmatrix()
    var odim = vert.dimensions()[0]
    var nv = vert.dimensions()[1]
    var copy = 0...min(odim, dim)
    var mb = MeshBuilder()

    for (i in 0...nv) {
        var pt = Matrix(dim)
        var v = vert.column(i)
        for (j in copy) pt[j]=v[j]
        mb.addvertex(pt)
    }

    if (dim<odim) odim = dim 

    for (grade in 1..odim) {
        var conn = mesh.connectivitymatrix(0,grade)

        if (!conn) continue
        for (i in 0...conn.dimensions()[1]) {
            mb.addelement(grade, conn.rowindices(i))
        }
    }

    return mb.build() 
}

/* **************************
 * Equiangulation
 * ************************** */

/* Tests whether to flip an edge
   @param[in] v - vertex matrix of edge
   @param[in] ev - vertex indices of the edge
   @param[in] cv - vertex indices of the vertices in the two triangles not
                   present in the edge
   @returns true if the edge should be flipped */
fn _equiangulatetest (v, ev, cv) {
  var a = (v.column(ev[0])-v.column(ev[1])).norm(), // Length of common edge
      b = (v.column(ev[0])-v.column(cv[0])).norm(), // Edges of face 1
      c = (v.column(ev[1])-v.column(cv[0])).norm(),
      d = (v.column(ev[0])-v.column(cv[1])).norm(), // Edges of face 2
      e = (v.column(ev[1])-v.column(cv[1])).norm()

   return ((b*b + c*c - a*a)*d*e + (d*d + e*e - a*a)*b*c) < 0
}

/* Finds vertices in a pair of triangles not in a common edge
   @param[in] ev - list of two vertex ids
   @param[in] faces - faces definition matrix
   @param[in] ef - ids of two adjacent faces
   @returns a list of vertices present in triangles ef but not part of ev */
fn _cvert(ev, faces, ef) {
  var cv = []
  for (i in 0..1) for (v in faces.rowindices(ef[i])) if (!ev.ismember(v)) cv.append(v)
  return cv
}

/* Flip the edge */
fn _edgeflip(m, iedge, edges, faces, ev, cv, ef) {
  edges.setrowindices(iedge, cv)
  faces.setrowindices(ef[0], [ev[0], cv[0], cv[1]])
  faces.setrowindices(ef[1], [ev[1], cv[0], cv[1]])
  m.resetconnectivity()
}

fn equiangulate(m, quiet=false, fix=nil) {
  var vert = m.vertexmatrix()
  var edges = m.connectivitymatrix(0,1)
  var faces = m.connectivitymatrix(0,2)
  var edgetoface = m.connectivitymatrix(2,1)
  var verttoedge = m.connectivitymatrix(1,0)
  var ne = edges.dimensions()[1]
  var nflip = 0

  for (iedge in 0...ne) {
    if (fix && fix[1,iedge]) continue
    var ev=edges.rowindices(iedge) // vertices for this edge
    if (verttoedge.rowindices(ev[0]).count()<4 ||
        verttoedge.rowindices(ev[1]).count()<4) continue // skip if connectivity deficient

    var ef=edgetoface.rowindices(iedge) // faces attached to this edge
    if (ef.count()!=2) continue  // Only edges that are connected to two triangles

    var cv=_cvert(ev, faces, ef)
    if (_equiangulatetest(vert, ev, cv)) {
      _edgeflip(m, iedge, edges, faces, ev, cv, ef)
      edgetoface = m.connectivitymatrix(2,1) // Recalculate connectivity
      verttoedge = m.connectivitymatrix(1,0) // Recalculate connectivity
      nflip+=1
    }
  }

  if (!quiet) print "Equiangulate: ${nflip} edges flipped."

  return nil
}


//////////////////////
// Utility functions
//////////////////////

// Compare two lists 
fn _cmpel(a,b) {
  if (a.count()!=b.count()) return false 
  for (x in a) if (!b.ismember(x)) return false 
  return true 
}

// Determine if list a is already in a list of lists 
fn _elinlist(ellist, a) {
  for (el in ellist) {
    if (_cmpel(el, a)) return true 
  }
  return false 
}

/* **********************************
 * ElementList
 * ********************************** */

var _errellstgrd = Error("ElLstGrd", "Element doesn't match grade of ElementList.")

/* A data structure to (relatively) efficiently find duplicate elements. 
   Presently uses a Sparse to do this; a Dictionary would be better in future */
class ElementList {
  init(mesh, grade, sort=false) {
    self.grade = grade 
    self.sort = sort 
    var nv = mesh 
    if (ismesh(mesh)) nv = mesh.count() 
    self._store = Sparse(nv, nv)
    self._count = 0 
  }

  _add(el) {
    if (self._match(el)) return 

    if (self.grade==1) {
      self._store[el[0],el[1]] = true 
    } else {
      var st = el[2..self.grade] // Use the remaining indices 
      var lst = self._store[el[0],el[1]]
      if (islist(lst)) lst.append(st) // If there's a list already, store it 
      else self._store[el[0],el[1]]=[st] // Otherwise, just return it 
    }
    self._count+=1 
  }

  _match(el) {
    var entry = self._store[el[0],el[1]]
    if (isbool(entry)) return true // If the entry is a boolean (grade 1) then we have a match
    if (islist(entry)) { 
      return _elinlist(entry, el[2..self.grade]) // If not, we have to match the remaining indices in the list 
    }
    return false 
  }

  _checksrt(el) { // Checks to see if we need to sort the element
    if (!self.sort) return el 
    var ell = el.clone()
    ell.sort()
    return ell
  }

  addelement(el) { // Adds an element to the structure 
    self._add(self._checksrt(el))
  }

  ismember(el) { // Checks if an element is already a member 
    if (el.count()!=self.grade+1) _errellstgrd.throw() 
    return self._match(self._checksrt(el))
  }

  count() {
    return self._count
  }
}

/* **************************
 * Merging meshes
 * ************************** */

class MeshMerge is MeshBuilder {
  init (meshes, tol=1e-12) {
    self.meshes = meshes
    self.tree = nil
    self.tol = tol // Tolerance below which vertices will be considered identical
    self.nv = 0
    self.elists = nil 
    super.init()
  }

  maxgrade() {
    var lst = []
    for (m in self.meshes) lst.append(m.maxgrade())
    return max(lst)
  }

  addmesh(msh) {
    if (isnil(self.meshes)) self.meshes = []
    if (!islist(self.meshes)) self.meshes = [self.meshes]
    if (islist(msh)) for (el in msh) self.meshes.append(el)
    else self.meshes.append(msh)
  }

  addvertex(x) {
    if (self.tree) {
      // Does this vertex already exist?
      var nrst = self.tree.nearest(x)
      if ((nrst.location - x).norm() > self.tol) {
        // No, so create a new one
        var new = self.tree.insert(x)
        new.indx = super.addvertex(x)
        return new.indx
      } else { // Yes, so just return the index
        return nrst.indx
      }
    } else { // If the tree wasn't created yet, create it and add the vertex
      self.tree = KDTree([x])
      self.tree.head.indx = super.addvertex(x)
      return self.tree.head.indx
    }
  }

  mergevertices(m) { // Merges vertices into the mesh
    var vert = m.vertexmatrix()
    var vdict = Dictionary()
    for (vid in 0...m.count()) {
      vdict[vid] = self.addvertex(vert.column(vid))
    }
    return vdict
  }

  _initelists() {
    var mg = self.maxgrade()
    self.elists = Array(mg+1)
    var nv = self.vertices.count()
    for (g in 1..mg) self.elists[g] = ElementList(nv, g, sort=true) 
  }

  _clearelists() {
    self.elists = nil 
  }

  addelement(g, el) {
    var elist = self.elists[g]
    if (elist.ismember(el)) return 
    elist.addelement(el)
    super.addelement(g, el)
  }

  mergegrade(m, g, dict) { // Merges elements of grade g into the mesh
    var conn = m.connectivitymatrix(0, g)
    for (id in 0...m.count(g)) {
        var newel = [] // Convert the indices into new vertex indices
        var duplicate = false // Check if the merged element contains duplicate vertices
        
        for (elid in conn.rowindices(id)) {
          if (newel.ismember(dict[elid])) duplicate=true 
          newel.append(dict[elid])
        }
        
        if (!duplicate) self.addelement(g, newel)
    }
  }

  merge() {
    var vdict = [] 
    for (m in self.meshes) { // First merge the vertices
      vdict.append(self.mergevertices(m))
    } 

    self._initelists() // Prepare lists to keep track of elements

    for (m, k in self.meshes) { // Then merge all higher grades
      for (grade in 1..m.maxgrade()) { 
        self.mergegrade(m, grade, vdict[k])
      }
    }

    self._clearelists() 

    return self.build() // Build the mesh
  }
}

/* ********************************
 * Simple refinement 
 ******************************** */

// Calculate the midpoint of an edge
fn _midpoint(vertices, edges, i) {
  var edge = edges.rowindices(i)
  return 0.5*(vertices.column(edge[0])+vertices.column(edge[1]))
}

// Swaps elements of an indexable object
fn _swap(e, i, j) {
  var swp = e[i]; e[i] = e[j]; e[j]=swp
}

/** Refines a mesh */
fn refinemesh(m) {
  var vertices = m.vertexmatrix()
  var edges = m.connectivitymatrix(0, 1)
  if (isnil(edges)) { // If no edges are present, we should try to add them
    m.addgrade(1)
    edges = m.connectivitymatrix(0, 1)
    if (isnil(edges)) { print "Failed to add edges"; return }
  }
  var faces = m.connectivitymatrix(0, 2)

  // Identify number of vertices, edges and faces in the old mesh
  var dim = vertices.dimensions()[0]
  var nv = vertices.dimensions()[1]
  var nl = edges.dimensions()[1]
  var nf = faces.dimensions()[1]

  var new = Mesh()

  // Each refined edge contributes a new vertex
  var newvertices = Matrix(dim, nv+nl)
  for (i in 0...nv) newvertices.setcolumn(i, vertices.column(i))
  for (i in 0...nl) {
    newvertices.setcolumn(nv+i, _midpoint(vertices, edges, i))
  }
  new.setvertexmatrix(newvertices)

  // Each edge becomes two edges
  var newedges = Sparse(nv+nl, nl) // Size is automatically updated
  var iedge = nl
  for (i in 0...nl) {
    var edge = edges.rowindices(i)
    newedges[edge[0], i]=1   // ] Edge 0
    newedges[nv+i, i]=1      // ]

    newedges[nv+i, iedge]=1     // ] Edge 1
    newedges[edge[1], iedge]=1  // ]
    iedge+=1
  }

  // Refine faces if present. Creates a canonical order for the face
  /*         a (e0[0])
           /   \
    e0   x ---  y  e1
        /  \ /  \
e0[1] b --- z -- c
            e2
  */
  var newfaces = Sparse(nv+nl, 4*nf)
  var iface = nf // Count over new triangles
  if (!isnil(faces)) {
    var faceedge = m.connectivitymatrix(1,2)

    for (i in 0...nf) {
      var fvert = faces.rowindices(i) // Vertices in this face
      var fedge = faceedge.rowindices(i) // Edges in this face

      var evert[3] // Vertices for each edge
      for (f, i in fedge) evert[i]=edges.rowindices(f)
      // evert 0 defines vertices a and b
      var va=evert[0][0], vb=evert[0][1], vc=evert[1][0]
      if (evert[0].ismember(vc)) vc = evert[1][1]
      // The vertices are now in canonical order

      // does edge 1 connect with a? if not swap
      if (!evert[1].ismember(va)) _swap(fedge, 1, 2)
      // The edges are now in a canonical order, so that evert[1] connects to the first element of evert[0]
      var vx = nv+fedge[0], vy = nv+fedge[1], vz = nv+fedge[2]

      // Triangle a-x-y
      newfaces[va,i]=1; newfaces[vx,i]=1; newfaces[vy,i]=1
      // Triangle b-x-z
      newfaces[vb,iface]=1; newfaces[vx,iface]=1; newfaces[vz,iface]=1; iface+=1
      // Triangle c-y-z
      newfaces[vc,iface]=1; newfaces[vy,iface]=1; newfaces[vz,iface]=1; iface+=1
      // Triangle x-y-z
      newfaces[vx,iface]=1; newfaces[vy,iface]=1; newfaces[vz,iface]=1; iface+=1

      // Edge x-y
      newedges[vx, iedge]=1; newedges[vy, iedge]=1; iedge+=1
      // Edge x-z
      newedges[vx, iedge]=1; newedges[vz, iedge]=1; iedge+=1
      // Edge y-z
      newedges[vy, iedge]=1; newedges[vz, iedge]=1; iedge+=1
    }
  }

  new.addgrade(1, newedges)
  new.addgrade(2, newfaces)

  return new
}

/* ********************************
 * Advanced refinement 
 ******************************** */

/* **********************************
 * Base class for adaptive refinement 
 * ********************************** */

/* Subclasses must implement their own version of adaptmesh, 
   which returns a list of dictionaries, one for each grade of element, 
   Each dictionary has: 
    * keys corresponding to the new element ids; 
    * values can be either 
      - a single elementid in the old mesh OR
      - a list of elements which will be averaged over 
*/ 

class MeshAdaptiveRefiner { 
  init (target) { // The target can either be a single mesh or a collection of objects
    self.target = target
    self.refinemap = nil 
    self.new = nil
  }

  mesh() { // Returns the mesh being refined 
    if (ismesh(self.target)) return self.target
    else if (islist(self.target)) {
      for (m in self.target) if (ismesh(m)) return m
    }
    return nil
  }

  // Subclasses should replace this method with their own version
  adaptmesh(selection) { }

  adaptfield(field) { // Maps a field onto a new mesh
    var mesh = self.mesh()
    var prototype = field.enumerate(0)
    if (isobject(prototype)) prototype=prototype.clone()
    var shape = field.shape()
    var result

    if (self.refinemap && prototype) {
      result = Field(self.new, prototype, grade=shape)

      for (g in 0...shape.count()) {
        if (shape[g]==0) continue
        var dict = self.refinemap[g]

        for (newid in dict) { // Loop over the new ids 
          var oldid = dict[newid]

          if (islist(oldid)) { // If this oldid is a list, average over these values
            var sum, nn = oldid.count()
            if (isfloat(prototype)) sum = 0
            if (nn==0) continue
            for (i in 0...nn) sum+=field[g, oldid[i]]
            sum/=oldid.count()
            result[g, newid] = sum
          } else {
            result[g, newid] = field[g, oldid]
          }
        }
      }
    }

    return result
  }

  selectdown(el, oldsel, newsel) {
    var nv=self.mesh().count() // Max vertexid in old mesh 
    var vmap = self.refinemap[0]
    var vselected=false 

    for (vid in el) { // Check at least one vertex is selected 
      if (vid<nv && oldsel[0,vmap[vid]]) vselected=true 
    }

    if (vselected) for (vid in el) {
      if (vid<nv && !oldsel[0,vmap[vid]]) continue 
      newsel[0,vid]=true 
    }
  }

  adaptselection(sel) { // Maps a selection onto a new mesh
    var result

    if (self.refinemap) {
      result = Selection(self.new)

      for (g in 0..self.new.maxgrade()) {
        var dict = self.refinemap[g]
        if (sel.count(g)==0) continue
        var conn = self.new.connectivitymatrix(0,g)

        for (id in dict.keys()) {
          if (isint(dict[id]) && sel[g, dict[id]]) {
            result[g, id]=true
            if (g>0) self.selectdown(conn.rowindices(id), sel, result) 
          }
        }
      }
    }

    return result
  }

  adapt(selection=nil) { // Base adaptive refinement sequence
    var newmesh = self.adaptmesh(selection)

    // Returns a refinement dictionary that maps old objects to new
    var dict = { self.mesh() : self.new } 

    if (islist(self.target)) { 
      for (el in self.target) {
        if (isfield(el)) dict[el] = self.adaptfield(el)
        if (isselection(el)) dict[el] = self.adaptselection(el)
      }
    }

    return dict
  }
}

/* **************************
 * Refinement
 * ************************** */

class MeshRefiner is MeshAdaptiveRefiner {
  init (target) {
    self.target = target
    self.refinemap = nil
    self._clearelists()
    self.new = nil
  }

  mesh() {
    if (ismesh(self.target)) return self.target
    else if (islist(self.target)) {
      for (m in self.target) if (ismesh(m)) return m
    }
    return nil
  }

  _initelists(maxgrade, nv) {
    self.elists = Array(maxgrade+1)
    for (g in 1..maxgrade) self.elists[g] = ElementList(nv, g, sort=true) 
  }

  _clearelists() {
    self.elists = nil 
  }

  split(id, el, vert, dict) { // split elements, generating new vertices
    var nv = el.count()
    for (i in 0...nv) {     // Loop over distinct pairs 
      for (j in i+1...nv) { // 
        var midpoint = (vert.column(el[i])+vert.column(el[j]))/2
        if (!self.tree.ismember(midpoint)) { // Check if already exists 
          var id = self.mb.addvertex(midpoint) // Add vertex 
          self.tree.insert(midpoint).id = id
          dict[id]=[el[i],el[j]] // dict[new vertex] -> [oldvertices]
        }
      }
    }
  }

  addelement(srcid, grade, el, dict) {
    if (self.elists[grade].ismember(el)) return nil
    var id = self.mb.addelement(grade, el)
    self.elists[grade].addelement(el)
    if (isdictionary(dict)) dict[id] = srcid 
    return id 
  }

  refine1(id, el, vert, nel, dict) { // refine edges
    var midpoint = (vert.column(el[0])+vert.column(el[1]))/2
    var mp = self.tree.ismember(midpoint) 
    if (mp) {
      self.addelement(id, lineGrade, [el[0], mp.id], dict) 
      self.addelement(id, lineGrade, [mp.id, el[1]], dict) 
    } // refinement dictionary key: new edge id -> old edge id 
    return isobject(mp)
  }
 
  refine2(id, el, vert, nel, dict) { // refine faces
    var nv = el.count()
    var refedge = []

    for (i in 0...nv) { // Generate midpoints
      for (j in i+1...nv) {
        var midpoint = (vert.column(el[i])+vert.column(el[j]))/2
        var node = self.tree.ismember(midpoint)
        if (node) {
          refedge.append([el[i], el[j], node.id])
        }
      }
    }

    /* Three possible outcomes of refinement:
            .            .            .
          / | \        / | \        /   \
         /  |  \      /  |  *      * --- *
        /   |   \    /   | / \    /  \  /  \
      . --- * -- . . --- * -- . . --- * -- . */

    var nref = refedge.count()
    if (nref==0) {
      return false 
    } else if (nref==1) {
      var tid
      for (id in el) if (!refedge[0].ismember(id)) tid = id

      self.addelement(id, areaGrade, [refedge[0][0], refedge[0][2], tid], dict)
      self.addelement(id, areaGrade, [refedge[0][2], refedge[0][1], tid], dict)

      if (nel[1]>0) {
        self.addelement(id, lineGrade, [refedge[0][2], tid], nil)
      }
    } else if (nref==2) {
      var shareid, xid, yid
      for (id in el) {
        if (refedge[0].ismember(id) && refedge[1].ismember(id)) shareid = id
        if (refedge[0].ismember(id) && !refedge[1].ismember(id)) xid = id
        if (!refedge[0].ismember(id) && refedge[1].ismember(id)) yid = id
      }

      self.addelement(id, areaGrade, [shareid, refedge[0][2], refedge[1][2]], dict)
      self.addelement(id, areaGrade, [xid, refedge[0][2], refedge[1][2]], dict)
      self.addelement(id, areaGrade, [xid, yid, refedge[1][2]], dict)

      if (nel[1]>0) {
        self.addelement(id, lineGrade, [refedge[1][2], xid], nil)
        self.addelement(id, lineGrade, [refedge[0][2], refedge[1][2]], nil)
      }
    } else if (nref==3) {
      self.addelement(id, areaGrade, [el[0], refedge[0][2], refedge[1][2]], dict)
      self.addelement(id, areaGrade, [el[1], refedge[0][2], refedge[2][2]], dict)
      self.addelement(id, areaGrade, [el[2], refedge[1][2], refedge[2][2]], dict)
      self.addelement(id, areaGrade, [refedge[0][2], refedge[1][2], refedge[2][2]], dict)

      if (nel[1]>0) {
        self.addelement(id, lineGrade, [refedge[0][2], refedge[1][2]], nil)
        self.addelement(id, lineGrade, [refedge[1][2], refedge[2][2]], nil)
        self.addelement(id, lineGrade, [refedge[2][2], refedge[0][2]], nil)
      }
    }
    return true 
  }

  refine3(id, el, vert, nel, dict) { // refine volumes 
    var nv = el.count() // Number of vertices in the element
    var pts = [] // Points defining the element
    var localmap = Dictionary() // Maps local ids in pts to correct ids 

    for (i in 0...nv) { // Find vertex positions and ids
      pts.append(vert.column(el[i])) 
      localmap[i]=el[i]
    }

    for (i in 0...nv) {      // Loop over all unique pairs 
      for (j in i+1...nv) {  // and find midpoints 
        var midpoint = (vert.column(el[i])+vert.column(el[j]))/2
        var node = self.tree.ismember(midpoint) // Find whether this midpoint actually exists
        if (node) {
          localmap[pts.count()]=node.id
          pts.append(midpoint)
        } 
      }
    }

    var tri = Delaunay(pts).triangulate() // Now perform the Delaunday triangulation

    fn _mapel(el) { // Map local ids for this element onto the correct ids 
      var ntri = [] 
      for (id in el) ntri.append(localmap[id]) 
      return ntri 
    } 

    fn _checkel(el) { // Check if this element contains any old vertices 
      for (id in el) if (id<nv) return false 
      return true 
    }

    for (t in tri) { // Loop over the generated tetrahedra from the triangulation
      self.addelement(id, volumeGrade, _mapel(t), dict)

      for (g in 1..2) { // Create "missing" elements of lower grade 
        if (nel[g]==0) continue // Skip empty grades 
        var elements = t.sets(g+1) // Generate all possible elements 
        // Generate new elements only from possibilites that use only new vertices
        for (e in elements) { 
          if (_checkel(e)) {
            self.addelement(id, g, _mapel(e), nil)
          }
        }
      }
    }
    return true 
  }

  // vdict keys: old vertex ids -> values: new vertex ids
  adaptmesh(selection) {
    var m = self.mesh()
    self.mb = MeshBuilder()
    var vertices = m.vertexmatrix()
    var dim = vertices.dimensions()[0]
    var nv = vertices.dimensions()[1]
    var refmap = [ ] // Dictionary describing how element ids are mapped over
    var nel[dim+1] // Number of elements in each grade

    for (g in 0..dim) nel[g]=m.count(g)
    var vlist = []
    var vdict = Dictionary() // Vertex map dictionary 
    for (vid in 0...nv) { // Loop over vertexids in old mesh 
      var x = vertices.column(vid) // Get the vertex position
      vlist.append(x) 
      var newid = self.mb.addvertex(x)
      vdict[newid] = vid // Add the vertex to the new mesh
    }

    self.tree=KDTree(vlist)

    // Create new vertices
    for (g in 1..dim) {
      var el = m.connectivitymatrix(0, g)

      for (i in 0...nel[g]) { // Loop over elements
        if (selection && !selection.isselected(g, i)) continue
        //print "Split grade ${g} element ${i}"
        self.split(i, el.rowindices(i), vertices, vdict)
      }
    }
    refmap.append(vdict)

    // Now loop over all elements and either copy or refine them
    self._initelists(dim, self.mb.vertices.count())
    for (g in 1..dim) {
      var refinemethod = "refine${g}"
      var el = m.connectivitymatrix(0, g)
      var dict = Dictionary()

      for (i in 0...nel[g]) { // Loop over elements
        //print "Refine grade ${g} element ${i}"
        var eind = el.rowindices(i)
        if (!self.invoke(refinemethod, i, eind, vertices, nel, dict)) {
          self.addelement(i, g, eind, dict) // Just copy the element across
        }
      }

      refmap.append(dict)
    }
    self._clearelists()

    self.refinemap = refmap

    return (self.new=self.mb.build())
  }

  refine(selection=nil) {
    return self.adapt(selection=selection)
  } 
}

/* **************************
 * Pruning
 * ************************** */

class MeshPruner is MeshAdaptiveRefiner {
  init (target, fix=nil) {
    self.fix = fix // Fixed vertices 
    self.clusters = nil // A list of clusters 
    self.vmap = nil // A dictionary that maps elements to clusters

    super.init(target) 
  }

  findclusterfromvertex(vid) { // Finds the cluster containing a vertex, if any
    if (self.vmap.contains(vid)) return self.vmap[vid]
    return nil 
  }

  countvertices(vlist) { // Counts the number of vertices in vlist that belong to any cluster
    var count = 0
    for (vid in vlist) {
      if (self.vmap.contains(vid)) count+=1
    }
    return count
  } 

  countmaxverticesincluster(vlist) { // Counts the number of maximum number of vertices in vlist that belong to a single cluster
    var count = Dictionary() 
    var max = 0
    for (vid in vlist) {
      if (self.vmap.contains(vid)) {
        var cluster = self.vmap[vid]
        if (count.contains(cluster)) count[cluster]+=1
        else count[cluster]=1
      }
    }
    for (c in count) if (count[c]>max) max=count[c]
    return max
  } 

  addcluster(vlist) { // Creates a new cluster from a list of vertices
    var newcluster = []
    self.clusters.append(newcluster)
    self.addverticestocluster(newcluster, vlist)
  }

  addverticestocluster(cluster, vlist) { // Adds vertices to a cluster
    for (v in vlist) {
      if (!cluster.ismember(v)) cluster.append(v)
      self.vmap[v]=cluster
    }
  }

  mergeclusters(clusters) { // Merges clusters into one
    for (k in 1...clusters.count()) {
      self.addverticestocluster(clusters[0], clusters[k])
      self.clusters.remove(clusters[k])
    }
  }

  collapseelement(vlist) { // Collapses the vertices in element 
    var clusters = []
    for (v in vlist) {
      var c = self.findclusterfromvertex(v)
      // Make sure we don't find duplicate clusters
      if (c && !_elinlist(clusters, c)) clusters.append(c)
    }

    var nc = clusters.count() // Did any of these vertices belong to a cluster?
    if (nc==0) { // No, so they form a new cluster
      self.addcluster(vlist)
    } else { // Yes, so we add them to an existing cluster
      self.addverticestocluster(clusters[0],vlist)
      if (nc>1) self.mergeclusters(clusters) // Merge if they combine more than one
    }
  }

  updateelement(vdict, vlist) { // Maps elements of vlist using vdict
    var nvlist = []
    for (v in vlist) nvlist.append(vdict[v])
    return nvlist
  }
  
  isfixed(vid) { // Test if a vertex is fixed 
    if (self.fix) return self.fix[0, vid]
    return false
  } 

  clustercenter(vlist) { // Find the center of a cluster 
    var m = self.mesh()
    var fix
    var x 
    for (vid in vlist) {
      if (self.isfixed(vid)) {
        if (fix) _errMltVClstrFxd.throw()
        fix=m.vertexposition(vid)
        break
      } 
      x+=m.vertexposition(vid)
    }

    if (fix) x=fix
    else if (x) x/=vlist.count() 
    
    return x
  }

  adaptmesh(selection) {
    var m = self.mesh()
    self.clusters = []
    self.vmap = Dictionary() 

    // Identify clusters of points to collapse
    for (g in 1..m.maxgrade()) {
      var conn = m.connectivitymatrix(0, g)
      var ids = selection.idlistforgrade(g)
      for (elid in ids) {
        var el=conn.rowindices(elid) 
        self.collapseelement(el) 
      }
    }

    // Now build the new mesh 
    var mb = MeshBuilder() 
    var refmap = [ ] // Dictionary describing how element ids are mapped over
    var vdict = Dictionary(), // Map newids to oldids
        vmap = Dictionary() // Map old vertex ids to new ids
    for (oldid in 0...m.count()) { // Add vertices that aren't being collapsed
      if (self.findclusterfromvertex(oldid)) continue
      var newid = mb.addvertex(m.vertexposition(oldid))
      vdict[newid]=oldid
      vmap[oldid]=newid
    }
    for (cluster in self.clusters) { // Collapse each cluster to a new vertex
      var x = self.clustercenter(cluster)
      var newid = mb.addvertex(x)
      vdict[newid]=cluster
      for (oldid in cluster) vmap[oldid]=newid
    }
    refmap.append(vdict)

    // Now add appropriate elements 
    for (g in 1..m.maxgrade()) {
      var conn = m.connectivitymatrix(0, g)
      var dict = Dictionary() 
      var clist = []

      for (id in 0...m.count(g)) {
        var el = conn.rowindices(id)
        var nvcl = self.countvertices(el) // Number of vertices in a cluster
        if (nvcl<2 || self.countmaxverticesincluster(el)==1) {
          var newel = self.updateelement(vmap, el)
          if (nvcl==1) { // Skip if this element is a duplicate
            if (_elinlist(clist, newel)) continue 
            clist.append(newel) // Only track elements connected to a cluster
          }
          var newid = mb.addelement(g, newel)
          dict[newid] = id
        }
      }
      refmap.append(dict)
    }

    self.refinemap = refmap

    self.new = mb.build() 
    return self.new
  }

  prune(selection) {
    return self.adapt(selection=selection)
  } 
}
