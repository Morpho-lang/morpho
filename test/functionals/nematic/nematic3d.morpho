// Test nematic

import meshtools
import optimize

var tol = 1e-6

var m = Mesh("tetrahedron.mesh")

var nn = Field(m, Matrix([1,0,0]))

nn[0]=Matrix([1/sqrt(2),1/sqrt(2),0])
nn[2]=Matrix([1/sqrt(2),0,1/sqrt(2)])
nn[3]=Matrix([0,1,0])

var lnn = Nematic(nn)

var expected = 0.192873
var tol = 1e-5

print abs(lnn.integrand(m)[0]-expected)<tol
// expect: true

print abs(lnn.total(m)-expected)<tol
// expect: true

expected = Matrix([ [ 0.00681066, -0.0122614, 0.127771, -0.122321 ],
                    [ 0.146216, -0.187767, 0.104294, -0.0627433 ],
                    [ 0.184703, -0.13233, 0.0545992, -0.106972 ] ])

print (lnn.gradient(m)-expected).norm()<tol
// expect: true

expected =  [ [ 0.100994, 0.0116086, -0.173546 ], 
            [ 0.231387, 0.117958, 0.0782424 ],
            [ 0.00116726, -0.182391, 0.127534 ],
            [ -0.156362, 0.178114, 0.0196655 ] ]

var fg=lnn.fieldgradient(nn,m)
for (x,k in fg) print (x-Matrix(expected[k])).norm()<tol
// expect: true
// expect: true
// expect: true
// expect: true
