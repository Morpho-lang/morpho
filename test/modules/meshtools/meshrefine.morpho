import meshtools

var m = Mesh("tetrahedron.mesh")
print m
// expect: <Mesh: 4 vertices>

var m2 = refinemesh(m)
print m2
// expect: <Mesh: 10 vertices>

print m2.connectivitymatrix(0,1)
// expect: [ 1 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ]
// expect: [ 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ]
// expect: [ 0 0 0 0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ]
// expect: [ 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 ]
// expect: [ 1 0 0 0 0 0 1 0 0 0 0 0 1 1 0 0 0 0 0 0 0 1 1 0 ]
// expect: [ 0 1 0 0 0 0 0 1 0 0 0 0 1 0 1 0 0 0 1 1 0 0 0 0 ]
// expect: [ 0 0 1 0 0 0 0 0 1 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 ]
// expect: [ 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 1 1 ]
// expect: [ 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 1 0 1 1 0 0 0 ]
// expect: [ 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 1 0 1 1 0 1 ]

print m2.connectivitymatrix(0,2)
// expect: [ 1 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 ]
// expect: [ 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 0 ]
// expect: [ 0 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 ]
// expect: [ 0 0 0 0 0 0 0 0 1 0 0 1 0 0 1 0 ]
// expect: [ 1 0 0 1 1 0 1 0 0 0 0 0 0 1 0 1 ]
// expect: [ 1 0 1 0 0 1 1 0 0 0 1 0 1 0 0 0 ]
// expect: [ 0 1 0 0 1 1 1 1 0 1 0 0 0 0 0 0 ]
// expect: [ 0 1 0 0 0 0 0 0 1 1 0 0 0 1 1 1 ]
// expect: [ 0 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 ]
// expect: [ 0 0 1 1 0 0 0 0 0 0 0 1 1 0 1 1 ]
