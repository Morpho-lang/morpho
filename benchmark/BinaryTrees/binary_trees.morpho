// Ported from the wren version.

class Tree {
  init(item, depth) {
    self.item = item
    if (depth > 0) {
      var item2 = item + item
      depth = depth - 1
      self.left = Tree(item2 - 1, depth)
      self.right = Tree(item2, depth)
    } else {
      self.left = nil
      self.right = nil
    }
  }

  check() {
    if (self.left == nil) {
      return self.item
    }

    return self.item + self.left.check() - self.right.check()
  }
}

var minDepth = 4
var maxDepth = 12
var stretchDepth = maxDepth + 1

var start = clock()

print "stretch tree of depth ${stretchDepth} check: " +
    "${Tree(0, stretchDepth).check()}"

var longLivedTree = Tree(0, maxDepth)

// iterations = 2^maxDepth
var iterations = 1
for (d in 0..maxDepth-1) {
  iterations = iterations * 2
}

var depth = minDepth
while (depth < stretchDepth) {
  var check = 0
  for (i in 1..iterations) {
    check = check + Tree(i, depth).check() + Tree(-i, depth).check()
  }

  print("${iterations * 2} trees of depth ${depth} check: ${check}")
  iterations = iterations / 4
  depth = depth + 2
}

print "long lived tree of depth ${maxDepth} check: ${longLivedTree.check()}"
print "elapsed: ${clock() - start}"
