// Compute the gradient of a tensor

import meshtools 

var mb = MeshBuilder() 
mb.addvertex([0,0])
mb.addvertex([2,0])
mb.addvertex([0,2])
mb.addvertex([2,2])
mb.addface([0,1,2])
mb.addface([1,3,2])
var m = mb.build()
m.addgrade(1)

fn f0(x,y) {
    return Matrix([[x+y, x^2+y^2], [-(x^2+y^2),x-y]])
}

var f = Field(m, f0, functionspace=FunctionSpace("CG2", grade=2))

print abs(AreaIntegral(fn (x, q) q[0,0], f, method={ }).total(m) - 8) < 1e-8
// expect: true

fn integrand(x, q) {
    var g = grad(q)
    var sum=0
    for (dg in g) sum+=dg.norm()^2
    return sum
}

print abs(AreaIntegral(integrand, f, method={ }).total(m) - 304/3) < 1e-8
// expect: true
