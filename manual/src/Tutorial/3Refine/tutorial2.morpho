// Morpho tutorial example
import meshtools
import optimize
import plot
import povray

var m = Mesh("disk.mesh")

// Initial boundary selection
var bnd=Selection(m, boundary=true)
bnd.addgrade(0)
//Show(plotselection(m, bnd, grade=1))

var nn = Field(m, Matrix([1,0,0]))

// Define functionals
var lf=Nematic(nn)
var lt=Length()
var la=LineIntegral(fn (x, n) n.inner(tangent())^2, nn)
var ln=NormSq(nn)
var laa=Area()

// Set up the optimization problem
var W = 1
var sigma = 1

var problem = OptimizationProblem(m)
problem.addenergy(lf)
problem.addenergy(la, selection=bnd, prefactor=-W/2)
problem.addenergy(lt, selection=bnd, prefactor=sigma)
problem.addconstraint(laa)
problem.addlocalconstraint(ln, field=nn, target=1)

// Create shape and field optimizers
var sopt = ShapeOptimizer(problem, m)
var fopt = FieldOptimizer(problem, nn)

// Function to visualize a director field
// m - the mesh
// nn - the director Field to visualize
// dl - scale the director
fn visualize(m, nn, dl) {
  var v = m.vertexmatrix()
  var nv = m.count() // Number of vertices
  var g = Graphics() // Create a graphics object
  for (i in 0...nv) {
    var x = v.column(i) // Get the ith vertex
	// Draw a cylinder aligned with nn at this vertex
    g.display(Cylinder(x-nn[i]*dl, x+nn[i]*dl, aspectratio=0.3))
  }
  return g
}

fn display(m, nn, dl, file) {
  // Visualize results
  var g=plotmesh(m, grade=1)
  var gnn=visualize(m, nn, dl)
  var gdisp = g+gnn

  gdisp.background = White
  var pov = POVRaytracer(gdisp)
  pov.viewpoint = Matrix([0,0,10])
  pov.viewangle = 25
  pov.background = White
  pov.light=[Matrix([10,10,10]), Matrix([-10,-10,10])]
  pov.render(file, quiet=true)
}

// Optimization loop
var refmax = 3
for (refiter in 1..refmax) {
  print "===Refinement level ${refiter}==="
  for (i in 1..100) {
    fopt.linesearch(20)
    sopt.linesearch(20)
  }

  display(m, nn, 0.2/refiter, "out${refiter}.pov")

  // Refinement
  if (refiter==refmax) break
  var mr=MeshRefiner([m, nn, bnd]) // Set the refiner up
  var refmap=mr.refine() // Perform the refinement
  for (el in [problem, sopt, fopt]) el.update(refmap) // Update the problem
  m=refmap[m]; nn=refmap[nn]; bnd=refmap[bnd] // Update variables
}
